import logging
from typing import Dict, Any, Optional
import json
import re

from models.zalo_events import (
    UserSendTextEvent, UserSendImageEvent, UserSendFileEvent,
    UserSendStickerEvent, UserSendLocationEvent
)

logger = logging.getLogger(__name__)

class MessageHandler:
    """
    Handler ƒë·ªÉ x·ª≠ l√Ω c√°c s·ª± ki·ªán tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
    """
    
    def __init__(self):
        # C√≥ th·ªÉ kh·ªüi t·∫°o AI service, database connection, etc.
        self.command_handlers = {
            "/start": self._handle_start_command,
            "/help": self._handle_help_command,
            "/info": self._handle_info_command,
        }
    
    async def handle_message_event(self, event) -> bool:
        """
        X·ª≠ l√Ω c√°c s·ª± ki·ªán tin nh·∫Øn
        """
        try:
            event_type = type(event).__name__
            logger.info(f"Processing message event: {event_type}")
            
            if isinstance(event, UserSendTextEvent):
                return await self._handle_text_message(event)
            elif isinstance(event, UserSendImageEvent):
                return await self._handle_image_message(event)
            elif isinstance(event, UserSendFileEvent):
                return await self._handle_file_message(event)
            elif isinstance(event, UserSendStickerEvent):
                return await self._handle_sticker_message(event)
            elif isinstance(event, UserSendLocationEvent):
                return await self._handle_location_message(event)
            
            return True
            
        except Exception as e:
            logger.error(f"Error handling message event: {str(e)}")
            return False
    
    async def _handle_text_message(self, event: UserSendTextEvent) -> bool:
        """X·ª≠ l√Ω tin nh·∫Øn text"""
        message_text = event.message.text
        user_id = event.user_id_by_app
        sender_name = event.sender.name
        
        logger.info(f"Text message from {sender_name} ({user_id}): {message_text}")
        
        # X·ª≠ l√Ω commands
        if message_text.startswith("/"):
            return await self._handle_command(message_text, event)
        
        # X·ª≠ l√Ω tin nh·∫Øn th√¥ng th∆∞·ªùng
        return await self._handle_normal_text(message_text, event)
    
    async def _handle_command(self, command: str, event: UserSendTextEvent) -> bool:
        """X·ª≠ l√Ω c√°c commands t·ª´ ng∆∞·ªùi d√πng"""
        parts = command.split()
        cmd = parts[0].lower()
        
        if cmd in self.command_handlers:
            return await self.command_handlers[cmd](event, parts[1:] if len(parts) > 1 else [])
        else:
            logger.info(f"Unknown command: {cmd}")
            # C√≥ th·ªÉ g·ª≠i tin nh·∫Øn "L·ªánh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£" v·ªÅ cho user
            return await self._send_response(
                event.user_id_by_app, 
                f"L·ªánh '{cmd}' kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. G·ª≠i /help ƒë·ªÉ xem danh s√°ch l·ªánh."
            )
    
    async def _handle_start_command(self, event: UserSendTextEvent, args: list) -> bool:
        """X·ª≠ l√Ω l·ªánh /start"""
        user_name = event.sender.name or "B·∫°n"
        response = f"Xin ch√†o {user_name}! üëã\n\nCh√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi d·ªãch v·ª• c·ªßa ch√∫ng t√¥i.\nG·ª≠i /help ƒë·ªÉ xem c√°c l·ªánh c√≥ s·∫µn."
        
        return await self._send_response(event.user_id_by_app, response)
    
    async def _handle_help_command(self, event: UserSendTextEvent, args: list) -> bool:
        """X·ª≠ l√Ω l·ªánh /help"""
        help_text = """üìã Danh s√°ch l·ªánh c√≥ s·∫µn:

/start - B·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng d·ªãch v·ª•
/help - Hi·ªÉn th·ªã tr·ª£ gi√∫p
/info - Th√¥ng tin v·ªÅ h·ªá th·ªëng

B·∫°n c≈©ng c√≥ th·ªÉ g·ª≠i tin nh·∫Øn th√¥ng th∆∞·ªùng v√† ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi."""
        
        return await self._send_response(event.user_id_by_app, help_text)
    
    async def _handle_info_command(self, event: UserSendTextEvent, args: list) -> bool:
        """X·ª≠ l√Ω l·ªánh /info"""
        info_text = f"""‚ÑπÔ∏è Th√¥ng tin h·ªá th·ªëng:

üÜî User ID: {event.user_id_by_app}
üì± App ID: {event.app_id}
‚è∞ Th·ªùi gian: {event.timestamp}
üë§ T√™n: {event.sender.name or 'Kh√¥ng c√≥'}

H·ªá th·ªëng ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng! ‚úÖ"""
        
        return await self._send_response(event.user_id_by_app, info_text)
    
    async def _handle_normal_text(self, text: str, event: UserSendTextEvent) -> bool:
        """X·ª≠ l√Ω tin nh·∫Øn text th√¥ng th∆∞·ªùng"""
        user_id = event.user_id_by_app
        
        # ·ªû ƒë√¢y b·∫°n c√≥ th·ªÉ:
        # 1. T√≠ch h·ª£p v·ªõi AI/chatbot
        # 2. X·ª≠ l√Ω business logic
        # 3. T√¨m ki·∫øm trong database
        # 4. G·ªçi external APIs
        
        # Example: Echo response v·ªõi m·ªôt s·ªë x·ª≠ l√Ω ƒë∆°n gi·∫£n
        if "hello" in text.lower() or "xin ch√†o" in text.lower():
            response = "Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n? üòä"
        elif "c·∫£m ∆°n" in text.lower() or "thank" in text.lower():
            response = "Kh√¥ng c√≥ g√¨! R·∫•t vui ƒë∆∞·ª£c gi√∫p ƒë·ª° b·∫°n! ü§ó"
        else:
            response = f"B·∫°n v·ª´a g·ª≠i: '{text}'\n\nT√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn c·ªßa b·∫°n. C·∫£m ∆°n b·∫°n! üìù"
        
        return await self._send_response(user_id, response)
    
    async def _handle_image_message(self, event: UserSendImageEvent) -> bool:
        """X·ª≠ l√Ω tin nh·∫Øn h√¨nh ·∫£nh"""
        user_id = event.user_id_by_app
        attachments = event.message.attachments
        
        logger.info(f"Image message from {user_id}: {len(attachments) if attachments else 0} attachments")
        
        # X·ª≠ l√Ω h√¨nh ·∫£nh
        # C√≥ th·ªÉ download, ph√¢n t√≠ch, OCR, etc.
        
        response = "T√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c h√¨nh ·∫£nh c·ªßa b·∫°n! üì∏\n\nCh·ª©c nƒÉng x·ª≠ l√Ω h√¨nh ·∫£nh ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn."
        return await self._send_response(user_id, response)
    
    async def _handle_file_message(self, event: UserSendFileEvent) -> bool:
        """X·ª≠ l√Ω tin nh·∫Øn file"""
        user_id = event.user_id_by_app
        attachments = event.message.attachments
        
        logger.info(f"File message from {user_id}: {len(attachments) if attachments else 0} files")
        
        response = "T√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c file c·ªßa b·∫°n! üìé\n\nCh·ª©c nƒÉng x·ª≠ l√Ω file ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn."
        return await self._send_response(user_id, response)
    
    async def _handle_sticker_message(self, event: UserSendStickerEvent) -> bool:
        """X·ª≠ l√Ω tin nh·∫Øn sticker"""
        user_id = event.user_id_by_app
        
        logger.info(f"Sticker message from {user_id}")
        
        response = "Sticker ƒë·∫πp qu√°! üòÑ"
        return await self._send_response(user_id, response)
    
    async def _handle_location_message(self, event: UserSendLocationEvent) -> bool:
        """X·ª≠ l√Ω tin nh·∫Øn v·ªã tr√≠"""
        user_id = event.user_id_by_app
        
        logger.info(f"Location message from {user_id}")
        
        # X·ª≠ l√Ω location data
        # C√≥ th·ªÉ l∆∞u v√†o database, t√¨m ki·∫øm nearby services, etc.
        
        response = "T√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c v·ªã tr√≠ c·ªßa b·∫°n! üìç\n\nCh·ª©c nƒÉng x·ª≠ l√Ω v·ªã tr√≠ ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn."
        return await self._send_response(user_id, response)
    
    async def _send_response(self, user_id: str, message: str) -> bool:
        """
        G·ª≠i ph·∫£n h·ªìi v·ªÅ cho ng∆∞·ªùi d√πng qua Zalo API
        
        Note: ƒê√¢y l√† placeholder. B·∫°n c·∫ßn implement th·ª±c t·∫ø v·ªõi Zalo Send API
        """
        try:
            logger.info(f"Sending response to {user_id}: {message}")
            
            # TODO: Implement actual Zalo Send API call
            # V√≠ d·ª•:
            # await zalo_api.send_message(user_id, message)
            
            # Hi·ªán t·∫°i ch·ªâ log ƒë·ªÉ test
            logger.info("Response logged (not sent - Zalo Send API not implemented yet)")
            
            return True
            
        except Exception as e:
            logger.error(f"Error sending response: {str(e)}")
            return False
