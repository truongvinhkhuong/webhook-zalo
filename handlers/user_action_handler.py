import logging
from typing import Dict, Any
from datetime import datetime

from models.zalo_events import (
    FollowOAEvent, UnfollowOAEvent, UserSubmitInfoEvent, UserClickButtonEvent
)

logger = logging.getLogger(__name__)

class UserActionHandler:
    """
    Handler ƒë·ªÉ x·ª≠ l√Ω c√°c s·ª± ki·ªán h√†nh ƒë·ªông c·ªßa ng∆∞·ªùi d√πng
    """
    
    def __init__(self):
        # C√≥ th·ªÉ kh·ªüi t·∫°o database connection, external services, etc.
        pass
    
    async def handle_user_action_event(self, event) -> bool:
        """
        X·ª≠ l√Ω c√°c s·ª± ki·ªán h√†nh ƒë·ªông c·ªßa ng∆∞·ªùi d√πng
        """
        try:
            event_type = type(event).__name__
            logger.info(f"Processing user action event: {event_type}")
            
            if isinstance(event, FollowOAEvent):
                return await self._handle_follow_event(event)
            elif isinstance(event, UnfollowOAEvent):
                return await self._handle_unfollow_event(event)
            elif isinstance(event, UserSubmitInfoEvent):
                return await self._handle_submit_info_event(event)
            elif isinstance(event, UserClickButtonEvent):
                return await self._handle_button_click_event(event)
            
            return True
            
        except Exception as e:
            logger.error(f"Error handling user action event: {str(e)}")
            return False
    
    async def _handle_follow_event(self, event: FollowOAEvent) -> bool:
        """X·ª≠ l√Ω s·ª± ki·ªán ng∆∞·ªùi d√πng follow OA"""
        user_id = event.user_id_by_app
        follower = event.follower
        
        logger.info(f"User {follower.name} ({user_id}) followed OA")
        
        # L∆∞u th√¥ng tin ng∆∞·ªùi follow v√†o database
        await self._save_follower_info(user_id, follower, "follow")
        
        # G·ª≠i tin nh·∫Øn ch√†o m·ª´ng
        welcome_message = f"""üéâ Ch√†o m·ª´ng {follower.name or 'b·∫°n'} ƒë·∫øn v·ªõi Official Account c·ªßa ch√∫ng t√¥i!

C·∫£m ∆°n b·∫°n ƒë√£ theo d√µi. Ch√∫ng t√¥i s·∫Ω c·∫≠p nh·∫≠t nh·ªØng th√¥ng tin m·ªõi nh·∫•t v√† h·ªØu √≠ch cho b·∫°n.

G·ª≠i /help ƒë·ªÉ xem c√°c l·ªánh c√≥ s·∫µn."""
        
        # TODO: G·ª≠i welcome message qua Zalo Send API
        logger.info(f"Welcome message for {user_id}: {welcome_message}")
        
        return True
    
    async def _handle_unfollow_event(self, event: UnfollowOAEvent) -> bool:
        """X·ª≠ l√Ω s·ª± ki·ªán ng∆∞·ªùi d√πng unfollow OA"""
        user_id = event.user_id_by_app
        follower = event.follower
        
        logger.info(f"User {follower.name} ({user_id}) unfollowed OA")
        
        # C·∫≠p nh·∫≠t status trong database
        await self._save_follower_info(user_id, follower, "unfollow")
        
        # C√≥ th·ªÉ trigger m·ªôt s·ªë cleanup tasks
        # V√≠ d·ª•: x√≥a scheduled messages, d·ª´ng notifications, etc.
        
        return True
    
    async def _handle_submit_info_event(self, event: UserSubmitInfoEvent) -> bool:
        """X·ª≠ l√Ω s·ª± ki·ªán ng∆∞·ªùi d√πng submit th√¥ng tin"""
        user_id = event.user_id_by_app
        info = event.info
        sender = event.sender
        
        logger.info(f"User {sender.name} ({user_id}) submitted info: {info}")
        
        # X·ª≠ l√Ω th√¥ng tin ƒë∆∞·ª£c submit
        # C√≥ th·ªÉ l√† form data, survey response, registration info, etc.
        
        # L∆∞u th√¥ng tin v√†o database
        await self._save_user_submitted_info(user_id, info)
        
        # X√°c nh·∫≠n ƒë√£ nh·∫≠n ƒë∆∞·ª£c th√¥ng tin
        confirmation_message = "‚úÖ C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i th√¥ng tin!\n\nCh√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c v√† s·∫Ω x·ª≠ l√Ω s·ªõm nh·∫•t c√≥ th·ªÉ."
        
        # TODO: G·ª≠i confirmation message
        logger.info(f"Confirmation message for {user_id}: {confirmation_message}")
        
        return True
    
    async def _handle_button_click_event(self, event: UserClickButtonEvent) -> bool:
        """X·ª≠ l√Ω s·ª± ki·ªán ng∆∞·ªùi d√πng click button"""
        user_id = event.user_id_by_app
        message = event.message
        sender = event.sender
        
        logger.info(f"User {sender.name} ({user_id}) clicked button")
        
        # Ph√¢n t√≠ch button ƒë∆∞·ª£c click
        button_payload = self._extract_button_payload(message)
        
        if button_payload:
            return await self._handle_button_payload(user_id, button_payload)
        
        return True
    
    def _extract_button_payload(self, message) -> Dict[str, Any]:
        """Tr√≠ch xu·∫•t payload t·ª´ button click"""
        try:
            # Button payload th∆∞·ªùng ƒë∆∞·ª£c encode trong message attachments
            if hasattr(message, 'attachments') and message.attachments:
                for attachment in message.attachments:
                    if isinstance(attachment, dict) and 'payload' in attachment:
                        return attachment['payload']
            
            # Ho·∫∑c c√≥ th·ªÉ trong message text d∆∞·ªõi d·∫°ng JSON
            if hasattr(message, 'text') and message.text:
                import json
                try:
                    return json.loads(message.text)
                except json.JSONDecodeError:
                    pass
            
            return {}
            
        except Exception as e:
            logger.error(f"Error extracting button payload: {str(e)}")
            return {}
    
    async def _handle_button_payload(self, user_id: str, payload: Dict[str, Any]) -> bool:
        """X·ª≠ l√Ω payload t·ª´ button click"""
        try:
            action = payload.get('action')
            data = payload.get('data', {})
            
            logger.info(f"Button action '{action}' for user {user_id} with data: {data}")
            
            # X·ª≠ l√Ω c√°c actions kh√°c nhau
            if action == "get_info":
                return await self._handle_get_info_action(user_id, data)
            elif action == "make_order":
                return await self._handle_make_order_action(user_id, data)
            elif action == "contact_support":
                return await self._handle_contact_support_action(user_id, data)
            else:
                logger.warning(f"Unknown button action: {action}")
            
            return True
            
        except Exception as e:
            logger.error(f"Error handling button payload: {str(e)}")
            return False
    
    async def _handle_get_info_action(self, user_id: str, data: Dict[str, Any]) -> bool:
        """X·ª≠ l√Ω action l·∫•y th√¥ng tin"""
        info_type = data.get('type', 'general')
        
        # T·∫°o response d·ª±a tr√™n lo·∫°i th√¥ng tin ƒë∆∞·ª£c y√™u c·∫ßu
        if info_type == 'contact':
            response = """üìû Th√¥ng tin li√™n h·ªá:

üè¢ C√¥ng ty ABC
üìß Email: info@abc.com
‚òéÔ∏è Hotline: 1900-xxxx
üåê Website: www.abc.com
üìç ƒê·ªãa ch·ªâ: 123 ABC Street, City"""
        
        elif info_type == 'services':
            response = """üõçÔ∏è D·ªãch v·ª• c·ªßa ch√∫ng t√¥i:

‚úÖ D·ªãch v·ª• A
‚úÖ D·ªãch v·ª• B  
‚úÖ D·ªãch v·ª• C
‚úÖ H·ªó tr·ª£ 24/7

Li√™n h·ªá ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt!"""
        
        else:
            response = "‚ÑπÔ∏è Th√¥ng tin t·ªïng quan v·ªÅ d·ªãch v·ª• c·ªßa ch√∫ng t√¥i..."
        
        # TODO: G·ª≠i response message
        logger.info(f"Info response for {user_id}: {response}")
        
        return True
    
    async def _handle_make_order_action(self, user_id: str, data: Dict[str, Any]) -> bool:
        """X·ª≠ l√Ω action ƒë·∫∑t h√†ng"""
        product_id = data.get('product_id')
        
        logger.info(f"Order request for product {product_id} from user {user_id}")
        
        # T·∫°o order ho·∫∑c chuy·ªÉn h∆∞·ªõng ƒë·∫øn form ƒë·∫∑t h√†ng
        response = f"""üì¶ ƒê·∫∑t h√†ng s·∫£n ph·∫©m #{product_id}

Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong th·ªùi gian s·ªõm nh·∫•t ƒë·ªÉ x√°c nh·∫≠n ƒë∆°n h√†ng.

C·∫ßn h·ªó tr·ª£ th√™m? G·ª≠i /help"""
        
        # TODO: G·ª≠i response v√† c√≥ th·ªÉ t·∫°o order record
        logger.info(f"Order response for {user_id}: {response}")
        
        return True
    
    async def _handle_contact_support_action(self, user_id: str, data: Dict[str, Any]) -> bool:
        """X·ª≠ l√Ω action li√™n h·ªá h·ªó tr·ª£"""
        issue_type = data.get('issue_type', 'general')
        
        logger.info(f"Support request type '{issue_type}' from user {user_id}")
        
        # Chuy·ªÉn ƒë·∫øn team support ho·∫∑c t·∫°o ticket
        response = """üéß H·ªó tr·ª£ kh√°ch h√†ng

Ch√∫ng t√¥i ƒë√£ ghi nh·∫≠n y√™u c·∫ßu h·ªó tr·ª£ c·ªßa b·∫°n.
Team h·ªó tr·ª£ s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong v√≤ng 24h.

M√£ ticket: #SUP{timestamp}""".format(timestamp=int(datetime.now().timestamp()))
        
        # TODO: T·∫°o support ticket v√† g·ª≠i response
        logger.info(f"Support response for {user_id}: {response}")
        
        return True
    
    async def _save_follower_info(self, user_id: str, follower: Any, action: str) -> bool:
        """L∆∞u th√¥ng tin follower v√†o database"""
        try:
            # TODO: Implement database save
            # V√≠ d·ª•:
            # await db.followers.upsert({
            #     "user_id": user_id,
            #     "name": follower.name,
            #     "avatar": follower.avatar,
            #     "action": action,
            #     "timestamp": datetime.now()
            # })
            
            logger.info(f"Saved follower info: {user_id} - {action}")
            return True
            
        except Exception as e:
            logger.error(f"Error saving follower info: {str(e)}")
            return False
    
    async def _save_user_submitted_info(self, user_id: str, info: Dict[str, Any]) -> bool:
        """L∆∞u th√¥ng tin do ng∆∞·ªùi d√πng submit"""
        try:
            # TODO: Implement database save
            # await db.user_submissions.insert({
            #     "user_id": user_id,
            #     "info": info,
            #     "timestamp": datetime.now()
            # })
            
            logger.info(f"Saved user submitted info: {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"Error saving user submitted info: {str(e)}")
            return False
